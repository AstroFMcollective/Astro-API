def classify(video_json: dict) -> str:
    """
        Classifies a YouTube video as 'song', 'music_video', or 'regular_video'.
    """
    snippet = video_json.get("snippet", {})
    content_details = video_json.get("contentDetails", {})
    
    category_id = snippet.get("categoryId", None)
    channel_title = snippet.get("channelTitle", "").lower()
    description = snippet.get("description", "").lower()
    title = snippet.get("title", "").lower()
    licensed = content_details.get("licensedContent", False)

    # Initialize scores
    song_score = 0
    music_video_score = 0
    regular_score = 0

    # --- SONG heuristics (YouTube Music "Art Track") ---
    if channel_title.endswith(" - topic"):
        song_score += 3
    if category_id == "10":
        song_score += 1
    if "provided to youtube by" in description:
        song_score += 3
    if "auto-generated by youtube." in description:
        song_score += 2

    # --- MUSIC VIDEO heuristics ---
    if category_id == "10":
        music_video_score += 2
    if licensed:
        music_video_score += 1
    if not channel_title.endswith(" - topic") and category_id == "10":
        music_video_score += 1

    # Title-based strong indicators
    music_video_keywords = [
        "(official video)",
        "(official music video)",
        "[official video]",
        "[official music video]",
        # Markers for K-pop, since they use different ones
        " official mv",
        " official m/v",
        " mv",
        " m/v",
    ]
    if any(keyword in title for keyword in music_video_keywords):
        music_video_score += 3  # very strong signal

    # Channel-based indicators
    if channel_title.endswith("vevo"):
        music_video_score += 3  # VEVO = strong official music video signal
        song_score -= 1         # VEVO channels never host Art Tracks

    # --- REGULAR VIDEO heuristics ---
    if category_id != "10":
        regular_score += 2
    if not licensed and category_id != "10":
        regular_score += 1

    # Pick the label with the highest score
    if song_score >= music_video_score and song_score >= regular_score:
        return "song"
    elif music_video_score >= song_score and music_video_score >= regular_score:
        return "music_video"
    else:
        return "regular_video"
